@inject NotificationService ToastService
@using TXSTBXRD_UI.Utils.Types
@implements IDisposable


<div class="nf-container @(_isVisible ? "nf-visible" : null) @_backgroundCssClass">
    <div class="nf-main-icon">
        <i class="@_iconCssClass" aria-hidden="true"></i>
    </div>
    <div class="nf-content">
        <div class="nf-title-container">
            <h5 class="nf-title">@_heading</h5>
            <div class="nf-control-btn">
                <i class="reload-icon control-btn" aria-hidden="true" onclick="location.reload()"></i>
                <i class="close-icon control-btn" aria-hidden="true" @onclick="HideToast"></i>
            </div>
        </div>
        <div class="nf-text">@_message</div>
    </div>
</div>




@code {
    private string? _heading;
    private string? _message;
    private bool _isVisible;
    private string? _backgroundCssClass;
    private string? _iconCssClass;

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
        ToastService.OnHide += HideToast;
    }

    private void ShowToast(string message, NotificationLevel level)
    {
        BuildToastSettings(level, message);
        _isVisible = true;
        StateHasChanged();
    }

    private void HideToast()
    {
        _isVisible = false;
        StateHasChanged();
    }

    private void BuildToastSettings(NotificationLevel level, string message)
    {
        switch (level)
        {
            case NotificationLevel.Info:
                _backgroundCssClass = "nf-bg-info";
                _iconCssClass = $"info-icon";
                _heading = "Info";
                break;
            case NotificationLevel.Success:
                _backgroundCssClass = "nf-bg-success";
                _iconCssClass = $"success-icon";
                _heading = "Success";
                break;
            case NotificationLevel.Warning:
                _backgroundCssClass = "nf-bg-warning";
                _iconCssClass = $"warning-icon";
                _heading = "Warning";
                break;
            case NotificationLevel.Error:
                _backgroundCssClass = "nf-bg-error";
                _iconCssClass = $"error-icon";
                _heading = "Error";
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(level), level, null);
        }

        _message = message;
    }

    void IDisposable.Dispose()
    {
        ToastService.OnShow -= ShowToast;
        ToastService.OnHide -= HideToast;
    }
}