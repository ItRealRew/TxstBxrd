@page "/registration"
@layout EmptyLayout

@inject Services.IdentityService identity

@using TXSTBXRD_MIDDLEWARE.IDENTITY

<link href="css/login-validation.css" rel="stylesheet" />

<PageTitle>Create new account</PageTitle>

<EditForm EditContext="editContext">
    <DataAnnotationsValidator />
    <div class="center-form">
        <a class="navbar-brand noselect" href="/">TXSTBXRD</a>
        <p class="login-form-description">Create new account to TXSTBXRD</p>
        <div class="login-form">
            <div class="create-selection">
                <InputText class="create-input" placeholder="First Name" @bind-Value="create.FirstName" />
                <InputText class="create-input" placeholder="Last Name" @bind-Value="create.LastName" />
            </div>
            <ValidationMessage For="@(() => create.FirstName)" />

            <InputText class="login-input" placeholder="Username" @bind-Value="create.Username" />
            <ValidationMessage For="@(() => create.Username)" />

            <InputText class="login-input" placeholder="Email" @bind-Value="create.Email" />
            <ValidationMessage For="@(() => create.Email)" />

            <div class="create-password-container">
                <InputText class="login-input" placeholder="Password" @bind-Value="create.Password"
                    type="@((visible ? "text" : "password"))" minlength="8" maxlength="15" size="15" />
                <div class="noselect @((visible ? "hide-password-btn" : "show-password-btn"))"
                    @onclick="changeVisibility"></div>
            </div>
            <ValidationMessage For="@(() => create.Password)" />

            <div class="login-options noselect">
            </div>
            <button @onclick="CreateAccount" class="btn-login">Create</button>
        </div>
        <br>
        <div class="login-form-add-users noselect">
            <p class="add-user-content login-lable"> Already have login and password?
                <a class="login-link" href="/login">Sign in</a>
            </p>
        </div>
    </div>
</EditForm>

@code {
    private Create create = new();
    EditContext? editContext;
    private bool visible = false;

    private void changeVisibility() => visible = !visible;


    protected override async void OnInitialized()
    {
        editContext = new(create);


        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async void CreateAccount()
    {
        if (!editContext.Validate())
            return;

        bool response = await identity.AddUser(create);
    }
}