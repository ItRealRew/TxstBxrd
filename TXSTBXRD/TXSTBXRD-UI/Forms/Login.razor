@page "/login"
@layout EmptyLayout

@inject NavigationManager NavigationManager
@inject Services.IdentityService identity
@inject Utils.ILocalStorage LocalStorage

@using TXSTBXRD_MIDDLEWARE.IDENTITY
@using TXSTBXRD_UI.Models.Forms

<link href="css/login-validation.css" rel="stylesheet" />

<PageTitle>LogIn</PageTitle>

<EditForm EditContext="editContext">
    <DataAnnotationsValidator />
    <div class="center-form">
        <a class="navbar-brand noselect" href="/">TXSTBXRD</a>
        <p class="login-form-description">Sign in to TXSTBXRD</p>
        <div class="login-validate" style="display: @(validateVisible ? "inline-block" : "none")">
            <p class="login-lable-validate noselect">Incorrect username or password.</p>
            <a class="close" @onclick="closeValidateVisible"></a>
        </div>
        <br class="noselect" style="display: @(validateVisible ? "inline-block" : "none")">
        <div class="login-form">
            <InputText class="login-input" placeholder="Username" autocomplete="username" @bind-Value="login.Login" />
            <ValidationMessage For="@(() => login.Login)" />
            <div class="create-password-container">
                <InputText class="login-input" placeholder="Password" autocomplete="current-password"
                    @bind-Value="login.Password" type="@((visible ? "text" : "password"))" minlength="8" maxlength="15"
                    size="15" />
                <div class="noselect @((visible ? "hide-password-btn" : "show-password-btn"))"
                    @onclick="changeVisibility"></div>
            </div>
            <ValidationMessage For="@(() => login.Password)" />
            <div class="login-options noselect">
                <div class="login-left-position">
                    <li class="checkboxline">
                        <label class="login-lable-click" for="checkbox" @onclick="clickLabelRememberMe">
                            <input @bind="IsRememberMe" type="checkbox" name="checkbox" class="login-checkbox"> Remember
                            me
                        </label>
                    </li>
                </div>
                <div class="login-right-position">
                    <a class="login-link" href="#wasap">Forgot your password?</a>
                </div>
            </div>
            <button @onclick="Authorize" class="btn-login">Sign in</button>
        </div>
        <br>
        <div class="login-form-add-users noselect">
            <p class="add-user-content login-lable"> Don't have an account yet?
                <a class="login-link" href="/registration">Create now</a>
            </p>
        </div>
    </div>
</EditForm>

@code {
    private LogIn login = new();
    EditContext editContext;
    protected bool validateVisible { get; set; } = false;
    protected bool IsRememberMe { get; set; }
    private bool visible = false;

    private void clickLabelRememberMe() => IsRememberMe = !IsRememberMe;
    private void openValidateVisible() => validateVisible = true;
    private void closeValidateVisible() => validateVisible = false;

    private void changeVisibility() => visible = !visible;

    protected override async void OnInitialized()
    {
        editContext = new(login);

        var IsSavedLogin = await LocalStorage.GetStringAsync("RememberedUserName");

        if (IsSavedLogin != null)
        {
            login.Login = IsSavedLogin;
            IsRememberMe = true;
        }

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async void Authorize()
    {
        if (!editContext.Validate())
            return;

        if (IsRememberMe)
        {
            await LocalStorage.SaveStringAsync("RememberedUserName", login.Login);
        }

        string response = await identity.Authentication(login);

        if (response == Guid.Empty.ToString())
        {
            openValidateVisible();

            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
            
            return;
        }

        await LocalStorage.SaveStringAsync("authorizationToken", response);
        NavigationManager.NavigateTo("/");
    }
}